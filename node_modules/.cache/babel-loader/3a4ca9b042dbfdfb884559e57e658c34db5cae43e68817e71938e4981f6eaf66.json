{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext } from 'react';\nimport { GameContext } from '../contexts/GameContext';\nimport { levels } from '../data/levels';\nimport { validation } from '../utils/validation';\nimport { helpers } from '../utils/helpers';\nexport const useGameState = () => {\n  _s();\n  const {\n    state,\n    dispatch\n  } = useContext(GameContext);\n  const toggleDot = (row, col) => {\n    if (!state.isRunning) {\n      dispatch({\n        type: 'TOGGLE_DOT',\n        row,\n        col\n      });\n    }\n  };\n  const runBombe = () => {\n    dispatch({\n      type: 'START_BOMBE'\n    });\n\n    // Simulate bombe machine running\n    setTimeout(() => {\n      if (validation.checkPattern(state.selectedDots, state.currentLevel)) {\n        dispatch({\n          type: 'FINISH_BOMBE',\n          key: levels[state.currentLevel].decryptionKey\n        });\n      } else {\n        dispatch({\n          type: 'BOMBE_ERROR'\n        });\n      }\n    }, 2000);\n  };\n  const checkAnswer = () => {\n    if (validation.checkAnswer(state.userAnswer, state.currentLevel)) {\n      const score = helpers.calculateScore(state.timeSpent, state.selectedDots.size);\n      dispatch({\n        type: 'ANSWER_CORRECT',\n        score\n      });\n      if (state.currentLevel < levels.length - 1) {\n        dispatch({\n          type: 'NEXT_LEVEL',\n          message: levels[state.currentLevel + 1].encryptedMessage\n        });\n      } else {\n        dispatch({\n          type: 'GAME_COMPLETE'\n        });\n      }\n    } else {\n      dispatch({\n        type: 'ANSWER_INCORRECT'\n      });\n    }\n  };\n  const setUserAnswer = answer => {\n    dispatch({\n      type: 'SET_USER_ANSWER',\n      answer\n    });\n  };\n  return {\n    ...state,\n    toggleDot,\n    runBombe,\n    checkAnswer,\n    setUserAnswer,\n    totalLevels: levels.length\n  };\n};\n_s(useGameState, \"QMdo+h1+fLbTriZQ0QN6uukzyow=\");","map":{"version":3,"names":["useContext","GameContext","levels","validation","helpers","useGameState","_s","state","dispatch","toggleDot","row","col","isRunning","type","runBombe","setTimeout","checkPattern","selectedDots","currentLevel","key","decryptionKey","checkAnswer","userAnswer","score","calculateScore","timeSpent","size","length","message","encryptedMessage","setUserAnswer","answer","totalLevels"],"sources":["/Users/qdong/Desktop/Enigmadv4/src/hooks/useGameState.js"],"sourcesContent":["import { useContext } from 'react';\nimport { GameContext } from '../contexts/GameContext';\nimport { levels } from '../data/levels';\nimport { validation } from '../utils/validation';\nimport { helpers } from '../utils/helpers';\n\nexport const useGameState = () => {\n  const { state, dispatch } = useContext(GameContext);\n\n  const toggleDot = (row, col) => {\n    if (!state.isRunning) {\n      dispatch({ type: 'TOGGLE_DOT', row, col });\n    }\n  };\n\n  const runBombe = () => {\n    dispatch({ type: 'START_BOMBE' });\n    \n    // Simulate bombe machine running\n    setTimeout(() => {\n      if (validation.checkPattern(state.selectedDots, state.currentLevel)) {\n        dispatch({ \n          type: 'FINISH_BOMBE',\n          key: levels[state.currentLevel].decryptionKey\n        });\n      } else {\n        dispatch({ type: 'BOMBE_ERROR' });\n      }\n    }, 2000);\n  };\n\n  const checkAnswer = () => {\n    if (validation.checkAnswer(state.userAnswer, state.currentLevel)) {\n      const score = helpers.calculateScore(\n        state.timeSpent,\n        state.selectedDots.size\n      );\n      \n      dispatch({ type: 'ANSWER_CORRECT', score });\n      \n      if (state.currentLevel < levels.length - 1) {\n        dispatch({\n          type: 'NEXT_LEVEL',\n          message: levels[state.currentLevel + 1].encryptedMessage\n        });\n      } else {\n        dispatch({ type: 'GAME_COMPLETE' });\n      }\n    } else {\n      dispatch({ type: 'ANSWER_INCORRECT' });\n    }\n  };\n\n  const setUserAnswer = (answer) => {\n    dispatch({ type: 'SET_USER_ANSWER', answer });\n  };\n\n  return {\n    ...state,\n    toggleDot,\n    runBombe,\n    checkAnswer,\n    setUserAnswer,\n    totalLevels: levels.length\n  };\n};\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,OAAO,QAAQ,kBAAkB;AAE1C,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGR,UAAU,CAACC,WAAW,CAAC;EAEnD,MAAMQ,SAAS,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC9B,IAAI,CAACJ,KAAK,CAACK,SAAS,EAAE;MACpBJ,QAAQ,CAAC;QAAEK,IAAI,EAAE,YAAY;QAAEH,GAAG;QAAEC;MAAI,CAAC,CAAC;IAC5C;EACF,CAAC;EAED,MAAMG,QAAQ,GAAGA,CAAA,KAAM;IACrBN,QAAQ,CAAC;MAAEK,IAAI,EAAE;IAAc,CAAC,CAAC;;IAEjC;IACAE,UAAU,CAAC,MAAM;MACf,IAAIZ,UAAU,CAACa,YAAY,CAACT,KAAK,CAACU,YAAY,EAAEV,KAAK,CAACW,YAAY,CAAC,EAAE;QACnEV,QAAQ,CAAC;UACPK,IAAI,EAAE,cAAc;UACpBM,GAAG,EAAEjB,MAAM,CAACK,KAAK,CAACW,YAAY,CAAC,CAACE;QAClC,CAAC,CAAC;MACJ,CAAC,MAAM;QACLZ,QAAQ,CAAC;UAAEK,IAAI,EAAE;QAAc,CAAC,CAAC;MACnC;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIlB,UAAU,CAACkB,WAAW,CAACd,KAAK,CAACe,UAAU,EAAEf,KAAK,CAACW,YAAY,CAAC,EAAE;MAChE,MAAMK,KAAK,GAAGnB,OAAO,CAACoB,cAAc,CAClCjB,KAAK,CAACkB,SAAS,EACflB,KAAK,CAACU,YAAY,CAACS,IACrB,CAAC;MAEDlB,QAAQ,CAAC;QAAEK,IAAI,EAAE,gBAAgB;QAAEU;MAAM,CAAC,CAAC;MAE3C,IAAIhB,KAAK,CAACW,YAAY,GAAGhB,MAAM,CAACyB,MAAM,GAAG,CAAC,EAAE;QAC1CnB,QAAQ,CAAC;UACPK,IAAI,EAAE,YAAY;UAClBe,OAAO,EAAE1B,MAAM,CAACK,KAAK,CAACW,YAAY,GAAG,CAAC,CAAC,CAACW;QAC1C,CAAC,CAAC;MACJ,CAAC,MAAM;QACLrB,QAAQ,CAAC;UAAEK,IAAI,EAAE;QAAgB,CAAC,CAAC;MACrC;IACF,CAAC,MAAM;MACLL,QAAQ,CAAC;QAAEK,IAAI,EAAE;MAAmB,CAAC,CAAC;IACxC;EACF,CAAC;EAED,MAAMiB,aAAa,GAAIC,MAAM,IAAK;IAChCvB,QAAQ,CAAC;MAAEK,IAAI,EAAE,iBAAiB;MAAEkB;IAAO,CAAC,CAAC;EAC/C,CAAC;EAED,OAAO;IACL,GAAGxB,KAAK;IACRE,SAAS;IACTK,QAAQ;IACRO,WAAW;IACXS,aAAa;IACbE,WAAW,EAAE9B,MAAM,CAACyB;EACtB,CAAC;AACH,CAAC;AAACrB,EAAA,CA3DWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}