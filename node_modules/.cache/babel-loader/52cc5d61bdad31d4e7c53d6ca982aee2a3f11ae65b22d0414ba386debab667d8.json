{"ast":null,"code":"import { levels } from '../data/levels';\nexport const validation = {\n  checkPattern: (selectedDots, levelIndex) => {\n    const level = levels[levelIndex];\n    const requiredDots = new Set(level.requiredDots);\n\n    // Check if selected dots match required pattern\n    if (selectedDots.size !== requiredDots.size) {\n      return false;\n    }\n    return Array.from(requiredDots).every(dot => selectedDots.has(dot));\n  },\n  checkAnswer: (userAnswer, levelIndex) => {\n    const level = levels[levelIndex];\n    return userAnswer.toUpperCase() === level.correctMessage;\n  },\n  isValidPlugboardConnection: (from, to, existingConnections) => {\n    // Check if either letter is already connected\n    if (existingConnections.has(from) || existingConnections.has(to)) {\n      return false;\n    }\n\n    // Letters must be different\n    if (from === to) {\n      return false;\n    }\n    return true;\n  }\n};","map":{"version":3,"names":["levels","validation","checkPattern","selectedDots","levelIndex","level","requiredDots","Set","size","Array","from","every","dot","has","checkAnswer","userAnswer","toUpperCase","correctMessage","isValidPlugboardConnection","to","existingConnections"],"sources":["/Users/qdong/Desktop/Enigmadv4/src/utils/validation.js"],"sourcesContent":["import { levels } from '../data/levels';\n\nexport const validation = {\n  checkPattern: (selectedDots, levelIndex) => {\n    const level = levels[levelIndex];\n    const requiredDots = new Set(level.requiredDots);\n    \n    // Check if selected dots match required pattern\n    if (selectedDots.size !== requiredDots.size) {\n      return false;\n    }\n    \n    return Array.from(requiredDots).every(dot => selectedDots.has(dot));\n  },\n  \n  checkAnswer: (userAnswer, levelIndex) => {\n    const level = levels[levelIndex];\n    return userAnswer.toUpperCase() === level.correctMessage;\n  },\n  \n  isValidPlugboardConnection: (from, to, existingConnections) => {\n    // Check if either letter is already connected\n    if (existingConnections.has(from) || existingConnections.has(to)) {\n      return false;\n    }\n    \n    // Letters must be different\n    if (from === to) {\n      return false;\n    }\n    \n    return true;\n  }\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AAEvC,OAAO,MAAMC,UAAU,GAAG;EACxBC,YAAY,EAAEA,CAACC,YAAY,EAAEC,UAAU,KAAK;IAC1C,MAAMC,KAAK,GAAGL,MAAM,CAACI,UAAU,CAAC;IAChC,MAAME,YAAY,GAAG,IAAIC,GAAG,CAACF,KAAK,CAACC,YAAY,CAAC;;IAEhD;IACA,IAAIH,YAAY,CAACK,IAAI,KAAKF,YAAY,CAACE,IAAI,EAAE;MAC3C,OAAO,KAAK;IACd;IAEA,OAAOC,KAAK,CAACC,IAAI,CAACJ,YAAY,CAAC,CAACK,KAAK,CAACC,GAAG,IAAIT,YAAY,CAACU,GAAG,CAACD,GAAG,CAAC,CAAC;EACrE,CAAC;EAEDE,WAAW,EAAEA,CAACC,UAAU,EAAEX,UAAU,KAAK;IACvC,MAAMC,KAAK,GAAGL,MAAM,CAACI,UAAU,CAAC;IAChC,OAAOW,UAAU,CAACC,WAAW,CAAC,CAAC,KAAKX,KAAK,CAACY,cAAc;EAC1D,CAAC;EAEDC,0BAA0B,EAAEA,CAACR,IAAI,EAAES,EAAE,EAAEC,mBAAmB,KAAK;IAC7D;IACA,IAAIA,mBAAmB,CAACP,GAAG,CAACH,IAAI,CAAC,IAAIU,mBAAmB,CAACP,GAAG,CAACM,EAAE,CAAC,EAAE;MAChE,OAAO,KAAK;IACd;;IAEA;IACA,IAAIT,IAAI,KAAKS,EAAE,EAAE;MACf,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}